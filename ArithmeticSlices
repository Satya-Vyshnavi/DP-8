DP --> T.c --> O(n), S.c --> O(n)

class Solution {
    public int numberOfArithmeticSlices(int[] nums) {
      int n = nums.length;
      int[] dp = new int[n];
      int count = 0;
      for(int i =2; i<n;i++){
          if((nums[i] - nums[i-1]) == (nums[i-1] - nums[i-2])){
            dp[i] = dp[i-1]+1;  
          }
          count += dp[i];
      }
      return count;         
    }
}
***********************************************************************************
DP --> T.c --> O(n), S.c --> O(n)

class Solution {
    public int numberOfArithmeticSlices(int[] nums) {
      int n = nums.length;
      int[] dp = new int[n];
      int count = 0;
      for(int i =n-3; i>=0;i--){
          if((nums[i+2] - nums[i+1]) == (nums[i+1] - nums[i])){
            dp[i] = dp[i+1]+1;  
          }
          count += dp[i];
      }
      return count;      
    }
}
***********************************************************************************
T.c --> O(n), S.c --> O(1)

class Solution {
    public int numberOfArithmeticSlices(int[] nums) {
      int n = nums.length;
      int prev = 0;
      int count = 0;
      for(int i =2; i<n;i++){
          if((nums[i] - nums[i-1]) == (nums[i-1] - nums[i-2])){
            prev = prev+1;  
          }else{
            prev = 0;
          }
          count += prev;
      }
      return count;     
    }
}